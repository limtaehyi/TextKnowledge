1. 제로 트러스트

 Zero Trust
 - 인터넷이 발달하면서 해킹중 네트워크 감시 시스템이 유행한 시절 아무도 믿을 수 없었다. 그래서 인터넷 통신을 훔쳐본다는 가정하에 시스템이나 네트워크를 구축하는게 제로 트러스트이다.


 제로 트러스트 5원칙
 - 네트워크에 항상 해커가 존재한다고 가정한다
 - 내, 외부 위협이 항상 네트워크상 존재한다.
 - 네트워크의 물리적 위치로는 네트워크의 신뢰성을 보장 할 수 없다.
 - 모든 디바이스, 네트워크 연결, 사용자는 항상 인증과 허가를 거쳐야 한다.
 - 보안 정책은 유연해야 하며 가능한 많은 정보를 종합해 보안 정책을 세워야 한다.

 구조
 - 기존 네트워크 인터넷, DMZ, 신뢰, 기밀영역을 링 구조로 만들어 놔서 직원이나 사용자가 서비스를 연결할 때 무조건 인터넷부터 접속하여 내부로 들어가야 하는 구조이다.
 - 제로 트러스트 네트워크는 인터넷 영역에서 모든 것을 구축해 놓으며 모든 노드를 컨트롤 플레인에 연결해서 네트워크 설정을 바꿔준다.

 위험 모델
 - STRIDE : 스푸핑, 데이터 변조, 부인, 정보 유출, 서비스 거부, 권한 상승
 - DREAD : 피해, 재현용이성, 공격용이성, 영향받는 사용자, 발견용이성
 - PASTA : 목표 정의, 기술범위 정의, 앱 분해 및 분석, 위협 분석, 취약점/취약성 분석, 공격모델링 및 시뮬, 리스크 및 영향 분석 (공격 시뮬레이션 및 위험 분석 프로세스)
 - TRIKE : 보안 감사 프로세스를 위한 위협 모델
 - VAST : 인프라 및 전체 SDLC에서 위협 모델링 프로세스를 확장하여 에자일 개발 방법론에 통합에 중점
 - MS Threat modeling tool : https://learn.microsoft.com/ko-kr/azure/security/develop/threat-modeling-tool

 인증서
 - 이미 검증이 인증된 기기를 신뢰하기 위해서는 인증서를 통해 신뢰를 유지하며 X.509 표준을 사용하여 인증하는 것이 보편적이다.
 - 인증서는 두 종류의 암호키를 사용하는데 공개키를 사용한다. 
 - 새 인증서를 발급하거나 비밀번호, 비밀키 변경하거나 갱신하는 행위가 인증서 갱신이다.


2. 네트워크 에이전트

 에어전트
 - 에이전트란 단말기에서 해당 기기에 대한 데이터, 앱, 디바이스의 목록과 행위, 로그 등을 서버에 보내는 역할을 하는 합법 스파이웨어이다.
 - 네트워크 에이전트는 단말기의 네트워크 접근 요청에 대한 데이터를 보내며 기존 네트워크가 사용자, 앱, 디바이스에 대한 인증을 별도로 하고 허가했지만, 제로 트러스트에서는 이를 모두 반영한 보안 정책을 사용한다.
 - 네트워크 에이전트는 네트워크 내에서 발생하는 신뢰도 점수가 있기도 한다.
 - 에이전트는 허가와 관련이 있지만 인증과는 관련이 없다. 인증이 성공적으로 끝나야만 사용자와 디바이스를 식별할 ID를 사용해 에이전트를 생성한다.
 - 민감한 정보 즉 이름, 주소, 전화번호 같은 개인 식별 정보가 네트워크 에이전트에 저장될 수 있는데 프라이버시 침해에 유의해야 한다.


3. 네트워크 접근 허가

 보안 정책 적용 지점
 - 보안 정책 적용 지점에서 모든 절차가 시작되며 제어 허가 절차에 있어 최전방에 있다. 허가 시스템의 다른 부분에서 처리한 결과를 클라이언트에 전달하는 역할
 - 보안 정책 적용 지점은 크게 두가지 역할을 하는데 첫번째로는 보안 정책 엔진과의 통신으로 요청의 적법함을 따지는 것이고 두번째는 접근 허바 여부를 계속 유지하는 세션 역할이다.
 - 보안 정책 적용 지점의 구현은 네트워크 상황에 따라 다른데 보안 정책 엔진과 통신, 정책 적용이라는 두 시스템을 합칠수도 있고 분리하여 사전 접근 허가 데몬을 사용하여 분리할 수 있다.

 보안 정책 엔진
 - 보안 정책 엔진은 접근 요청에 대한 허가 여부를 결정하는데 있어 중요한 역할을 한다. 보안 정책 지점이 보내온 요청을 받아 보안 정책과 비교, 해당 요청의 승인 여부를 결정함
 - 다양한 이유로 보안 정책 적용 지점과 정책 엔진을 모으는 경우가 있는데 대표적으로 로드 벨런서가 있다. 
 - 로드 벨런서는 RPC가 아닌 IPC로 접근 요청을 허가 하는 경우가 있다. 접근 허가 요청에 걸리는 시간을 크게 단축할 수 있다.
 - 보안 정책 엔진이 사용할 규칙을 저장해 놓는 곳이 보안 정책 저장소이다. 또한 버전 컨트롤 시스템을 사용하면 보안 정책 규칙들을 저장하고 관리하기 용이하며 정책의 진화 과정 추적, 보안 정책이 진화한 이유 추적, 실제 보안정책 지점에서 적용한 보안이 최신버전인지 검증할 수 있다.

 트러스트 엔진
 - 특정 요청이나 이벤트에 대한 위험 정도를 분석하는 역할을 하며, 이 시스템에서 특정 요청이나 이벤트가 발생했을때 네트워크가 허용한다는 가정하에 발생할 위험이 어느정도인지 수치로 계산하는 일이다. 또한 이 수치는 보안 정책 엔진에 전달이 되고 해당 요청이나 이벤트를 승인할 것인지 결정하는데 사용된다.
 - 트러스트 엔진은 각종 DB에 접속해 데이터를 가져온다. 위험도를 수치로 계산할 떄 사용하기 위해서이다.
 - 위험도 수치를 계산하는 건 힘든 일이다. 간단한 방법으로는 최신 소프트웨어 패치가 아닌 디바이스의 점수를 깎을 수도 있다. 또한 인증을 계속 실패하는 사용자의 신뢰도 점수를 깎을 수도 있다. 

 신뢰도 점수
 - 신뢰도 점수를 계산하는 것이 좋은 시작점이 될 수 있지만 너무 맹신해서는 안되며 정적으로 점수를 계산해 놓으면 놓치는 부분이 생길 수 도 있다. 따라서 잘 개발된 트러스트 엔진은 정적인 점수 환산 및 머신러닝 기술을 활용한 점수 계산을 한다.
 - 제로 트러스트 네트워크에서 무엇을 점수로 환산 해야 할지가 중요한 문제이다.
 - 예를 들어 한 사용자가 브루트 포스 공격을 당하고 있다고 하면 해당 사용자의 계정을 잠궈서 보호하는 경우도 있지만 그 결과 진짜 사용자도 자신의 계정을 접근 할 수 없는 서비스 거부 공격이 발생한다. 따라서 이 예시에서 더 나은 방법은 사용자의 점수를 깎기 보단 해당 네트워크 에이전트에 대한 신뢰도 점수를 깎고 진짜 사용자의 네트워크 에이전트에는 변화가 없는 것이 이상적이다.
 - 또 다른 예로는 악의적인 사용자가 여러 키오스크 장치를 통해 정보를 빼내고 있다고 가정해보면 트러스트 엔진이 사용자의 이상 행동을 감지해 다른 키오스크에서 사용자 접근을 막는 것이 이상적인 대응이다. 즉 이번 예시에서도 네트워크 에이전트 단독으로 사용해서는 안된다는 것을 보여준다.
 - 제로 트러스트에서 네트워크 주체에 계산된 점수는 비밀이 아니지만 최종 점수를 사용자에게 보여줘서 악용하는 일이 없도록 하는 것이 바람직하다.


 데이터 저장소
 











