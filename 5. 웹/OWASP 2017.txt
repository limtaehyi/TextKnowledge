1. 웹 해킹 정의
 - 웹 사이트의 취약점을 공격하는 기술적 위협으로, 웹 페이지를 통하여 권한이 없는 시스템에 접근하거나 데이터 유출 및 파괴와 같은 행위를 말한다.
 - 대표적 예시는 owasp top 10이 있다.


2.owasp top 10
 - owasp top 10(Open Web Application Security Project)는 조직에서 신뢰할 수 있는 어플리케이션과 API를 개발, 구매, 유지관리할 수 있도록 지원하는 열린 커뮤니티로서 이 프로잭트에서 웹에 취약한 취약점들을 공개한 것이다.
 - owasp top 10은 2013년에서 2017년에 갱신되었는데
 1. 인젝션				   ->	1. 인젝션
 2. 취약한 인증과 세션관리		   ->	2. 취약한 인증
 3. 크로스 사이트 스크립팅	 	   ->	3. 민감한 데이터 노출
 4. 안전하지 않는 직접 객체 참조	   ->	4. XML 외부 개체(XXE)
 5. 잘못된 보안 구성 			   ->	5. 취약한 접근 통제
 6. 민감한 데이터 노출		   ->	6. 잘못된 보안 구성
 7. 기능 수준의 접근 통제 누락		   ->	7. 크로스 사이트 스크립팅
 8. 크로스 사이트 요청 변조		   ->	8. 안전하지 않은 역직렬화
 9. 알려진 취약점이 있는 구성요소 사용 	   ->	9. 알려진 취약점이 있는 구성요소 사용
 10. 검증되지 않은 리다이렉트 및 포워드	   ->	10. 불충분한 로깅 및 모니터링
 - 애플리케이션 보안 위험은 공격자들은 사업이나 조직에 피해를 입히기 위해 애플리케이션을 통한 다양한 경로를 이용할 수 있는데 이것을 애플리케이션 보안 위험이라 한다.
 - 위협 요소에는 공격 가능성, 취약점 확산정도, 취약점 탐지정도, 기술적 영향등이 있다.


3.인젝션
 - 인젝션이란 신뢰할수 없는 데이터 명령어나 쿼리문의 일부가 인터프리터로 보내질 때 발생한다. 
 - 인젝션은 광범위 적인 공격을 일컫는데 꼭 sql만이 아니더라도 다른 쉘 명령어나 파일도 인젝션 할 수 있다.


4.취약한 인증
 - 취약한 인증이란 인증 및 세션 관리와 관련 애플리케이션 기능이 잘못 구현되어 암호,키,세션토큰을 위험에 노출시킬수 있거나 다른 사용자의 권한 획득을 위해 구현 상 결함을 악용하는 것이다.
 - 공격자가 유효한 사용자 이름이나 비빌번호를 가진 상태에서 사용자 계정 정보 삽입과 같은 자동화 공격을 허용할 때 발생한다.
 - admin의 계정의 경우 신뢰할 수 없는 사람에게 제공하지 말고 무차별 공격, 탈취된 계정 정보 재사용 공격을 방지하는 게 좋다.
 ex)애플리케이션에 대한 적절한 세션 인증 만료 시간 부정의


5.민감한 데이터 노출
 - 민감한 데이터 노출이란 다수의 웹 애플리케이션과 API는 중요정보를 제대로 보호하지 않습니다. 공격자에게 신분 도용 및 다른 범죄를 수행하게 할 수 있는 것이다.
 - 백업을 포함하여 평문으로 처리하는 민감한 데이터가 있거나 오래되거나 취약한 알고리즘 사용이 주 원인이다.
 - 민감한 데이터 파악및 분류에 따라 통제한다.
 민감한 데이터들이 암호화하는지 확인
 ex)검색할때 자동으로 복호되는 데이터를 SQL결함으로 일반 텍스트로 중요정보 노출


6.XML 외부 개체
 - 오래되고 설정이 잘못된 XML프로세서들은 문서 내에서 외부 개체를 참조하는데 외부개체는 내부 파일을 공개하도록 공격할 수 있다.
 - 애플리케이션이 직접 XML를 입력받거나 신뢰할 수 없는 곳의 XML를 업로드할때 문제가 발생할 수 있다.
 - 보안 대책은 개발자가 XXE을 확인해야 한다.
 ex)<!ENTITY xxe SYSTEM "file:///etc/passwd" >]>


7.취약한 접근 통제
 - 취약한 접근 통제는 인증된 사용자가 할 수 있는 작업에 대한 제한이 제대로 적용되지 않을 때를 말한다. 따라서 공격자가 이 결함을 악용하여 다른 사용자의 계정에 접근하거나 접근 권한을 변경하는 등 권한 없는 기능과 데이터에 접근할 수 있다.
 - 사용자들이 의도한 권한을 벗어나 인가되지 않은 정보 노출, 데이터파괴나 조작등을 초래한다.
 - 보안 대책은 공격자가 접근 제어 검사 또는 메타 데이터를 수정할 수 없는 신뢰가능한 서버측 코드 또는 서버가 없는 api에 적용될 겅우에만 효과적이다.
 ex)http://example.com/app/admin


8.잘못된 보안 구성
 - 취약한 기본설정, 미완성, 민감정보가 포함된 에러메세지로 인해 정보가 유출되는 것이다. 
 - 불필요한 기능이나 디폴트 계정과 비밀번호의 활성화도 잘못된 보안 구성에 해당된다.
 - 위험을 빠르게 차단하고 반복적인 보안강화 절차를 적용해야함
 ex)클라우드의 서비스 제공자가 인터넷을 통해 다른사람이 접근 가능한 상태로 공유 권한을 열어두면 스토리지에 저장되어 있는 민감한 데이터
 에 대한 접근을 허용할 수 있다.


9.크로스 사이트 스크립팅
 - 공격자가 악성 스크립트를 업로드하여 다른 사용자의 세션을 탈취하거나 웹사이트를 변조, 악성 사이트로 리다이렉션 하는 것이다.
 - XSS공격에는 반사와 저장으로 나뉘는데 반사는 웹 애플리케이션이 지정변수 사용시 발생하는 취약점을 이요하는 것으로, 검색결과, 에러메세지등 서버가 외부에서 입력받은 값을 받아 브라우저에 응답할 때 전송하는 과정에서 입력되는 변수의 위험문자를 사용자에게 그대로 되돌려주면서 발생하는 것이 반사다.
 저장은 공격자가 악성 스크립트를 삽입하면 서버가 방문자에게 스크립트를 주면서 실행되는 것이다.
 - 보안 대책은 신뢰할 수 없는 데이터를 사용중인 브라우저 컨텐츠와 분리하는 방법이다.
 ex)이벤트 속성 : <img src="#" onerror="alert('XSS')">
    블랙리스트 우회 : <ruby oncopy="alert('XSS')">XSS</ruby>
    

10.안전하지 않은 역직렬화
 - 안전하지 않은 역직렬화는 원격코드의 실행으로 이어진다.
 - 객체 및 데이터 구조 관련 공격과 접근통제관련과 같이 일반적인 데이터 변조 공격으로 나뉜다
 - 대책은 신뢰할 수 없는 출처로부터 직렬화된 객체를 허용하지 않거나 원시 데이터 유형만을 허용하는 직렬화 매체를 사용하는 것이 안전하다


11.알려진 취약점이 있는 구성요소 사용
 - 라이브러리나 프레임워크등 다른 소프트웨어 모듈같은 컴포넌트는 애플리케이션같은 권한으로 실행되는데 취약한 컴포넌트가 악용될 시 데이터 손실을 일으키거나 서버가 장악되기까지 한다.
 - 소프트웨어가 미지원, 오래된 버전일 경우 취약할 취약할 수 있다.
 - 보안 대책으로는 제때 패치할 수 있는 패치 관리 프로세스가 있어야 한다.
ex) 구버전의 log4j 취약점

12.불충분한 로깅 및 모니터링
 - 불충분한 로깅과 모니터링은 공격자들이 시스템을 장기적으로, 중심파괴적으로 공격할 수 있게 만든다.
 - 불충분한 로깅, 탐지, 모니터링과 유효한 응답은 언제나 발생한다.
 - 로그 관리 솔루션에 의해 쉽게 사용가능한 로그가 생성되는지 확인한다. 모든 로그인, 접근통제, 서버측면의 입력값 검증 실패등이 의심스럽거나 악의적인 계정을 쉽게 식별할 수 있는 문맥으로 기록되는지 확인
