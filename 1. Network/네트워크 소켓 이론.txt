1.소켓 기본구문
-s = socket.socket ( socket_family, socket_type, protol = 0)

2.파라미터 설명
* socket_family : socket.AF_INET, PF_PACKET
-socket.AF_INET은 IPv4버전이며 PF_PACKET은 디바이스 드라이버에서 사용된다

*socket_type : socket.SOCK_DGRAM, socket.SOCK_RAW, socket.SOCK_STREAM
-socket.SOCK_DGRAM은 UDP로 신뢰성이 떨어지는 통신을 하며 
-socket.SOCK_STEAM은 TCP로 안정적이고 양방향 통신을 위해 쓰인다
-socket.SOCK_RAW은 받아온 소켓을 그냥 사용하기 위해 받는 소켓이다.

*protocol
-일반적으로 0을 사용한다.

3.서버 소켓 메소드
-socket.bind((address,port)) : 소켓 연결을 위해 꼭 열어둬야한다.
-socket.listen(q) : TCP 리스너를 실행시키는 메소드이다. q는 동시접속자수 설정이다.
-socket.accpet() : 클라이언트로부터 연결을 허용할때 쓰이는 메소드이다. 이 메소드는 이 메소드는 socket.listen과 같이쓰이며
  client_socket, address 두 값을 반환하는데 client_socket은 연결을 통해 주고받을 새 오브잭트이고 address는 client 주소이다.

4.클라이언트 소켓 메소드
-socket.connet(address) : 클라이언트에서 서버로 연결하는 메소드이다. address는 서버 주소이다.

5.일반적인 소켓 메소드
-socket.recv(bufsize) : socket으로 부터 TCP 메세지를 받는 메소드이다. bufsize는 한번에 받을 최대 데이터 크기이다.
-socket.recvfrom(bufsize) : 소켓으로부터 데이터를 받기위한 메소드인데 이것은 한쌍의 값을 반환하는데 첫번째는 
 전달받은 데이터값이고 두번째는 보낸 소켓 주소를 전달한다.
-socket.recv_into(buffer) : buffer보다 작거나 같은 데이터를 받는 메소드이다.
-socket.recvfrom_into(buffer) : 소켓으로부터 데이터를 받고 반환한값 한쌍을 받는데 nbytes는 수신바이트수고 address는 소켓이 데이터를 
 보낸 값이다.
-socket.send(bytes) : 데이터를 소켓으로 보내기 위해 쓰는 메소드이다.
-socket.sendto(data, address) : 데이터를 소켓으로 전송하기 위해 쓰이며 UDP를 사용한다. address는 원격 기기의 주소를 쓴다.
-socket.sendall(data) : 모든 데이터를 소켓으로 보낸다. 이 메소드는 에러 발생까지 계속 보내며 에러가 발생하면 socket.close로 종료시킨다.

6.서버 측 코드 예시
import socket
host = "(address)"
port = (port number)
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind((host, port))
s.listen(2)
conn, addr = s.accept()
print (addr, "(message)")
conn.send("(message)")
conn.close()

7.클라이언트 측 코드 예시
import socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
host = "(address)"
port = (port)
s.connect((host,port))
print s.recv(숫자)
s.send("Hello server")
s.close()

8. 소켓 예외
import socket
host = "(address)"
port = (port number)
s = socket.sock(socket.AF_INET, socket.SOCK_DGRAM)
try :
  s.bind((host,port))
  s.settimeout(시간)
  data, addr = s.recvfrom(데이터양)
  print ("recevied from", addr)
  print ("obtained", data)
  s.close()

except socket.timeout:
  print ("Client not connected")
