1. 시스템 콜

 - 시스템 콜은 사용자가 커널 레벨의 통신이며 사용자가 직접 커널에 접근 할 수 없기 때문에 시스템 콜을 사용하는 것이다.
 - 보통의 경우 시스템 콜을 사용해서 접근하기 보다는 시스템 콜을 사용해서 만든 각 언어의 API를 사용한다.
 - 시스템 콜의 목적은 api의 프로그램은 api 함수만으로는 많은 기능을 구현하기 어렵기 때문에 반드시 커널의 도움을 받아야한다. 그래서 커널 모드를 통한 작업은 시스템 콜을 사용 할 수 밖에 없게 된다.
 - 시스템 콜의 매개변수 전달은 3가지로 나뉜다. rax와 같은 레지스터를 통한 전송, 블록이나 테이블을 통한 전송, 긴 문자열을 전달하기 위한 스택을 통한 전송.


2. 쉘코드

 - 쉘코드는 시스템콜들을 일괄적으로 실행하게 짜놓은 다음 어셈블리어로 변환한 코드를 뜻한다.
 - orw 쉘코드는 파일을 열고 읽은 후 화면에 출력하는 쉘코드이다.
 - 시스템 콜은 시스템 콜을 사용하기 위한 번호가 정해져 있으며 rax에 번호를 넣고 시스템 콜을 호출한다.
 - 시스템 콜의 인자는 rax를 제외하고 rdi, rsi, rdx, rcx 순서로 매개 변수를 받는다.
 - 시스템 콜중에서 fd라는 인자가 있는데 이것은 유닉스 계열에서 사용하는 파일 서술자이며 0은 일반 입력(STDIN), 1은 일반 출력(STDOUT), 2는 일반 오류(STDERR)라는 뜻이다.

3. 시스템 콜 사용 
 open : int fd = open("/home/flag", O_RDONLY, Null)
 - 특정 파일을 여는 시스템 콜이며 시스템 콜 사용을 위한 번호는 0x02이며 첫번째 인자는 열 파일 위치, 두번째 인자는 어떤 방식으로 open할 것인지, 세번째 인자는 파일의 접근 권한을 뜻한다.
 - 성공적으로 open이 된 /home/flag는 rax에 저장됨.
 - 두번째 인자 종류 : O_RDONLY(읽기 전용), O_WRONLY(쓰기 전용), 0_RDWR(읽고 쓰기), 0_APPEND(기존 내용에 이어 확장), 0_CREAT(파일이 존재하지 않을 때 파일 생성)
 - 세번째 인자 종류 : RWX 즉 777
 - 어셈블리어
	push 0x67
	mov rax, 0x616c662f706d742f 
	push rax
	mov rdi, rsp    ; rdi = "/tmp/flag"
	xor rsi, rsi    ; rsi = 0 ; RD_ONLY
	xor rdx, rdx    ; rdx = 0
	mov rax, 2      ; rax = 2 ; syscall_open
	syscall         ; open("/tmp/flag", RD_ONLY, NULL)

 read : read(fd, buf, 0x30)
 - open을 통해 연 파일을 읽는 시스템 콜이며 시스템 콜 사용을 위한 번호는 0x00이며 첫번째 인자는 open으로 획득한 rax, 두번째 인자는 파일에서 읽은 데이터를 저장할 주소, 세번째 인자는 파일로부터 읽어낼 데이터의 길이를 뜻한다.
 - 어셈블리어
	mov rdi, rax      ; rdi = fd
	mov rsi, rsp
	sub rsi, 0x30     ; rsi = rsp-0x30 ; buf
	mov rdx, 0x30     ; rdx = 0x30     ; len
	mov rax, 0x0      ; rax = 0        ; syscall_read
	syscall           ; read(fd, buf, 0x30)
 
 write : write(1, buf, 0x30)
 - open을 통해 연 파일을 수정하는 시스템 콜이며 시스템 콜 사용을 위한 번호는 0x01이며 첫번째 인자는 STDOUT을 할것이기 때문에 1, 두번째와 세번째 인자는 read에서 사용한 값과 동일하다.
 - 어셈블리어
	mov rdi, 1        ; rdi = 1 ; fd = stdout
	sub rsi, 0x30     ; rsi = rsp-0x30 ; buf
	mov rdx, 0x30     ; rdx = 0x30     ; len
	mov rax, 0x1      ; rax = 1 ; syscall_write
	syscall           ; write(fd, buf, 0x30)


4. 시스템 콜 종류

 프로세스 제어 (Process Control)
 - fork(), exit(), wait(), 끝내기(end), 중지(abort), 적재(load), 실행(execute), 프로세스 생성(create process)
 - 프로세스 속성 획득과 설정(get process attribute and set process attribute), 시간 대기(wait time)
 - 사건 대기(wait event), 사건을 알림(signal event), 메모리 할당 및 해제 malloc, free

 파일 조작 (File Manipulation)
 - open(), read(), write(), close(), 파일 생성(create file), 파일 삭제(delete file) 
 - 열기(open), 닫기(close), 읽기(read), 쓰기(write), 위치 변경(reposition), 파일 속성 획득 및 설정(get file attribute and set file attribute)

 장치 관리 (Device Management)
 - ioctl(), read(), write(), 장치를 요구(request devices), 장치를 방출release device), 읽기, 쓰기, 위치 변경
 - 장치 속성 획득, 장치 속성 설정, 장치의 논리적 부착(attach) 또는 분리(detach)

 정보 유지 (Information Maintenace)
 -getpid(), alarm(), sleep(), 시간과 날짜의 설정과 획득(time), 시스템 데이터의 설정과 획득(date), 프로세스 파일, 장치 속성의 획득 및 설정

 통신 (Communication)
 - pipe(), shm_open(), mmap(), 통신 연결의 생성, 제거, 메시지의 송신, 수신, 상태 정보 전달, 원격 장치의 부착 및 분리

 보호 (Pretection)
 - chmod(), umask(), chown(), 권한(Permission) 설정


5. 시스템 콜 번호
 - https://elixir.bootlin.com/linux/v3.14/source/arch/x86/syscalls/syscall_64.tbl
