1. Docker

 환경 설정 및 쉘 방법
 - docker(./how2use.txt 참고)
 - WSL2
 - 대회용 폴더 참고
 - perl script
 perl -e 'print "A"x10'
 perl -e 'print "\xbf\x84\x04\x08"'
 perl -e 'print "A"x10 . "test" . "\n"'


2. 공격

 Buffer Over Flow
 - 메모리는 code, data, bss, heap, shared lib, stack으로 이루어져 있으며 그중 heap, stack의 버퍼의 정해진 크기를 넘겨 sfp, ret까지 수정하는 것을 의미
 - stack : 메모리의 스택 프레임은 아래부터 변수2, 변수1, ret, sfp(이전 함수의 ebp), (현재 함수의 ebp), local var으로 이루어져 있으며 local var에서 버퍼로 읽어들인 값이 sfp, ret의 영역을 침범하여 공격을 한다.
 - heap : 자료구조의 힙은 tree 구조를 지니고 있다. 하지만 메모리의 힙은 여러개의 chunk단위로 나뉘며 할당되면 header(prev_size, size), data로 해제되면 header(prev_size, size), fd(이전chunk), bk(다음chunk)로 이루어져 있다. 여기에서 힙 오버플로우는 스택과 다르게 프로그램의 함수 포인터를 조작하여 공격을 한다.

 Format String Bug
 - 포멧 문자열은 printf 함수에서 사용되는 출력 문자열을 뜻하며 %기호로 변수 출력의 방법을 설정한다. 하지만 포멧 문자열의 개수와 매개변수의 개수가 일치하지 않으면 fsb로 메모리의 주소를 알아낼 수 있다.

 Use After Free
 - heap에서는 큰 메모리를 효율적으로 관리하기 위해 필요에 따라 할당, 해제한다. 
 - 힙에는 병합 지연이라는 속성이 있는데 해제된 힙공간이 다시 할당 될때까지 캐시를 남겨두었다가 같은 크기로 다시 할당 할때 그 부분을 재사용한다.
 - 만약 m1, m2, m3, m4를 각각 20의 크기로 할당하고 m2, m3를 해제한다. 그 다음 v1을 20의 크기로 할당을 하면 m1, v1, (빈칸 20), m4가 된다. 여기에서 m2 변수의 주소를 출력하면 v1 변수의 주소와 동일한 것을 알 수 있다. 

 RaCe Condition
 - 

 Return To Csu
 - 

 Stack Pivoting
 - 

 Off By One
 - 

 Double Free
 - malloc을 이용해서 heap을 할당 할때 요청한 사이즈보다 크게 나오는 데 동적 메모리가 할당 될때 해당 메모리에 대한 정보들이 포함되기 때문이다.
 - 할당된 메모리 정보들은 malloc_chunk의 구조체로 pre_size, size, fd, bk, fd_next_size, bk_nextsize가 있다.
 - pre_size는 이전 chunk가 해제되면 설정되는 값, size는 현재 chunk 크기, fd는 이전 chunk의 주소값, bk는 다음 chunk의 주소값이다. fd, bk는 unsorted chunk list에 사용되는 값이며 chunk가 동적 할당되고 해제될때 unsorted chunk list에 들어간다.

 Frame Pointer Overflow
 - 버퍼 오버플로우로 인해 sfp값을 임의의 주소로 변경하는 취약점으로 취약 함수의 sfp를 덮어써 ebp를 쉘코드 부분으로 옮기게 한다음 esp로 실행.

 Out Of Bound
 - 인덱스 값이 음수이거나 배열의 길이에 벗어나면 발생하는 취약점
 - 

 Hook Overwrite
 - 

 Unsorted bin attack
 - 

 Tcache dup
 - 

 House of Spirit
 - 

 GOT Overwrite
 - GOT Overwrite는 동적 방식으로 컴파일된 바이너리가 공유 라이브러리를 호출 할때 PLT, GOT를 이용하는 것을 공격하는 기법니다.
 - PLT는 GOT를 참조하고 GOT에는 함수의 실제 주소가 있는데 GOT를 변경하면 호출할 함수를 바꾸는 것과 동일하다.
 - 타겟 함수의 plt 주소를 디스어샘블해보면 GOT 주소가 보이는데 이 주소를 바꾸면 된다.


3. 방어

 DEP, NX bit
 - 메모리는 code, data, stack, heap으로 이루어져 있다. 이중 data, stack, heap 부분에는 rwx권한이 있는데 DEP는 윈도우의 데이터 실행 방지 기능이며 이 3개의 섹션에 서 코드 실행을 금지하도록 설정하는 것이다. 만약 stack에 코드 실행 권한이 없다면 스택에 쉘코드를 복사, 실행한다고 해도 실행되지 않는다.
 - 작업관리자 창에서 프로세스 탭에서 확인이 가능하다.
 - 리눅스에서는 /proc/self/maps 파일을 보면 NX bit를 통해 stack, heap, libc 영역 실행 권한 여부를 볼 수 있다.
 - 우회 방법은 실행 권한이 있는 코드 영역이나 DLL 영역으로 복귀 주소를 변경하는데 이걸 RTL이라고 한다. 하지만 이것은 특정 함수만 사용하는 것이며 다양한 행동을 하기 위해서 ROP로 임의의 로직을 구현한다.

 Canary, Stack Guard
 - 스택 프레임은 변수2, 변수1, ret, sfp, local var로 이루어져 있다고 했는데 이중 sfp와 local var사이에 임의의 랜덤 값인 canary를 넣어 스택 프레임의 구조 변경을 인식한다.
 - 구조 변경 사항은 SSP를 통해 복귀 주소의 변조 감지를 하며 canary의 값이 변경되면 stack smashing detected 메세지가 출력된다.
 - 윈도우에서는 stack cookie가 사용된다.

 Stack Shield
 - 

 ASLR
 - ASLR은 메모리 주소를 실행 할때마다 랜덤으로 변경한다. 즉 스택, 힙의 주소도 바뀌며 실제로 ImageBase 값이 실행 할때 마다 바뀐다. 하지만 한번 실행되면 바뀌지 않는다.
 - 위도우에서는 .reloc 섹션이 추가된다.

 ASCII-Armor
 - 공유 라이브러리를 매핑할때 주소값위에 1바이트가 0x00이 되게 배치한다. 이렇게 배치한 경우 strcpy, scanf 같이 공백을 무시하는 문자열 관련 함수를 이용해 라이브러리 주소를 읽고 쓰는 것이 불가능해진다. 
 - 즉 rtl처럼 라이브러리 주소를 이용한 공격이 까다로워진다.

 Position Independent Executable
 - PIE는 위치 독립 코드로 이루어진 실행파일을 의미하며 코드가 매핑된 주소와 상관없이 실행되기 때문에 코드 매핑이 되는 메모리 영역이 매번 다르다.
 - 기존의 절대주소를 바탕으로 하는 plt, got 영역에 접근이 어려워졌다.


4. 우회 

 RTL
 -  

 ROP
 - 
 