프로그램

하드웨어
mainboard - 주방
cpu - 요리사 뇌
core - 뇌의 갯수(물리적)
thread - 뇌의 갯수(논리적)
processor - 생각을 처리하는 장치
process - 한 개의 생각
ram - 도마
gpu - 보조 예술 전문 요리사
repo - 냉장고
mouse, monitor, keyboard - 웨이터
program - 재료
rom - 주방 배치 구조

프로그램 종류
1. static (.lib, .a) - 프로그램 내에 함수 사용방법 정의
2. dynamic (.dll, .so) - 자주 사용하는 함수들의 집합체로 이미 컴파일링 되어 있어 시간 단축, 하지만 특정 함수만 못가져와서 단체로 가져와야 함

c언어
1. 저장소에서 프로그램을 가져와 실행시킨다
2. cpu의 전처리기로 #처리되어있는 정보 먼저 읽는다.
3. cpu의 컴파일러로 코드를 어셈블러로 변환시킨다
4. cpu의 어셈블러로 어셈블러로 된 코드를 기계어로 변환시킨다
5. cpu의 링커로 공유 라이브러리에 저장된 dll 위치를 모두 가져온다.
6. cpu의 로더로 램에 쓴다.

리눅스에서 c언어


ram(메모리)
1. 메모리는 code, data, bss, heap, shared library, stack으로 구성되어있다.
2. code는 실행할 프로그램의 코드가 저장되는 영역이며 텍스트 영역이다. 프로그램이 시작, 종료까지 메모리에 남아있다. cpu는 코드 영역에 저장된 명령을 하나씩 가져가서 처리한다.
3. data는 전역변수, 정적변수를 저장하는데 c언어에서 초기화 된 값, bss는 초기화 되지 않는 값이 저장된다.
4. heap은 유동적인 저장소를 할당하기 위한 곳으로 낮은 주소에서 높은 주소로 쓰인다.
5. shared library는 공유 라이브러리 영역으로 자주 사용하는 프로그램의 함수들을 컴파일해서 상주시키는 부분이다.
6. stack은 함수 호출과 관련되는 지역변수와 파라미터의 저장공간으로 높은 주소에서 낮은 주소로 쓰인다. 함수마다 스택프레임이라는 영역이 할당된다. LIFO방식으로 나중에 쓰인 값이 먼저 나간다. 스택 아래에는 커널의 영역이여서 침범할일이 없다.

스택프레임
1. 함수가 선언되면 기본적으로 함수 프롤로그가 시작되고 함수가 끝나면 함수 에필로그가 쓰인다.
2. 프롤로그는 기본적으로 매개변수, ret, sfp가 있고 처음으로 매개변수를 받고 그 위에 ret는 함수가 끝나고 다시 돌아갈 주소, sfp는 이전까지 사용한 ebp의 주소가 쓰인다. 
3. sfp가 사용되는 이유는 ebp는 1개인데 스택프레임은 여러개이기 때문이다.
